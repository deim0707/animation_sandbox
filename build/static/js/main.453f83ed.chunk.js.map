{"version":3,"sources":["Components/TransitionGroupExample/TransitionGroupExample.jsx","Components/ReactAnimationsExample/ReactAnimationsExample.jsx","Components/ReactReveal/ReactReavealTodo.jsx","Components/ReactSpring/ReactSpring.jsx","App.js","index.js"],"names":["TransitionGroupExample","styled","div","keyframes","bounce","tada","wobble","React","Component","ReactSpring","props1","useSpring","opacity","from","props2","number","style","span","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAwEeA,I,8gBCrEAC,IAAOC,IAAV,IAA8BC,YAA9B,IAA0CC,WACzCH,IAAOC,IAAV,IAA8BC,YAA9B,IAA0CE,SACrCJ,IAAOC,IAAV,IAA+BC,YAA/B,IAA2CG,W,MAFvD,I,0ECC+BC,IAAMC,U,OCUtBC,EAZK,WAChB,IAAMC,EAASC,YAAU,CAACC,QAAS,EAAGC,KAAM,CAACD,QAAS,KAChDE,EAASH,YAAU,CAAEI,OAAQ,IAAKF,KAAM,CAAEE,OAAQ,KACxD,OACI,gCACI,cAAC,IAASb,IAAV,CAAcc,MAAON,EAArB,4BACA,cAAC,IAASO,KAAV,UAAgBH,EAAOC,aCYpBG,MAbf,WACE,OACE,qBAAKC,UAAU,MAAf,SAMC,cAAC,EAAD,OCXLC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.453f83ed.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    Container,\r\n    ListGroup,\r\n    Button,\r\n} from 'react-bootstrap';\r\nimport {\r\n    CSSTransition,\r\n    TransitionGroup,\r\n} from 'react-transition-group';\r\nimport uniqId from \"uniqid\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./TransitionGroupExample.css\"\r\n\r\n// http://reactcommunity.org/react-transition-group/css-transition/\r\n// https://medium.com/hackernoon/5-ways-to-animate-a-reactjs-app-in-2019-56eb9af6e3bf\r\n\r\n// React Transition Group изменяет классы при изменении жизненного цикла компонента\r\n\r\nfunction TransitionGroupExample() {\r\n    const [items, setItems] = useState([\r\n        { id: uniqId(), text: 'Buy eggs' },\r\n        { id: uniqId(), text: 'Pay bills' },\r\n        { id: uniqId(), text: 'Invite friends over' },\r\n        { id: uniqId(), text: 'Fix the TV' },\r\n    ]);\r\n    return (\r\n        <Container style={{ marginTop: '2rem' }}>\r\n            <ListGroup style={{ marginBottom: '1rem' }}>\r\n                <TransitionGroup className=\"todo-list\">\r\n                    {items.map(({ id, text }) => (\r\n                        <CSSTransition\r\n                            key={id}\r\n                            timeout={500}\r\n                            classNames=\"item\"\r\n                        >\r\n                            <ListGroup.Item>\r\n                                <Button\r\n                                    className=\"remove-btn\"\r\n                                    variant=\"danger\"\r\n                                    size=\"sm\"\r\n                                    onClick={() =>\r\n                                        setItems(items =>\r\n                                            items.filter(item => item.id !== id)\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    &times;\r\n                                </Button>\r\n                                {text}\r\n                            </ListGroup.Item>\r\n                        </CSSTransition>\r\n                    ))}\r\n                </TransitionGroup>\r\n            </ListGroup>\r\n            <Button\r\n                onClick={() => {\r\n                    // const text = prompt('Enter some text');\r\n                    const text = uniqId();\r\n                    if (text) {\r\n                        setItems(items => [\r\n                            ...items,\r\n                            { id: uniqId(), text },\r\n                        ]);\r\n                    }\r\n                }}\r\n            >\r\n                Add Item\r\n            </Button>\r\n        </Container>\r\n    );\r\n}\r\nexport default TransitionGroupExample;\r\n","import styled, {keyframes} from \"styled-components\";\r\nimport {bounce, tada, wobble} from \"react-animations\";\r\n\r\nconst Bounce = styled.div`animation: 2s ${keyframes`${bounce}`} infinite`\r\nconst Tada = styled.div`animation: 2s ${keyframes`${tada}`} infinite`\r\nconst Wobble = styled.div`animation: 10s ${keyframes`${wobble}`} infinite`\r\n\r\nconst ReactAnimationsExample = () => {\r\n    return (\r\n        <div style={{margin: \"80px\"}}>\r\n            <Bounce><h1>Hi worrrrlddddd</h1></Bounce>\r\n            <Tada><h1>Hi worrrrlddddd</h1></Tada>\r\n            <Wobble><h1>Hi worrrrlddddd</h1></Wobble>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReactAnimationsExample;\r\n","import React from 'react';\r\nimport Fade from 'react-reveal/Fade';\r\nimport TransitionGroup from 'react-transition-group/TransitionGroup';\r\n\r\nclass ReactReavealTodo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.groupProps = {\r\n            appear: false,\r\n            enter: true,\r\n            exit: true,\r\n        };\r\n        this.state={\r\n            todo: '',\r\n            todos: [\r\n                'item 1',\r\n                'item 2',\r\n                'item 3',\r\n            ].map( (text, id) => ({ id, text }) ),\r\n        };\r\n        this.state.id = this.state.todos.length;\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.add = this.add.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n    }\r\n    add(event) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            id: this.state.id + 1,\r\n            todos: [\r\n                ...this.state.todos,\r\n                { id: this.state.id, text: this.state.todo || '-' }\r\n            ],\r\n            todo: '',\r\n        });\r\n    }\r\n    remove(event) {\r\n        this.setState({ todos: this.state.todos.filter( item =>\r\n                item.id !== +event.currentTarget.getAttribute('data-id')\r\n            )});\r\n\r\n    }\r\n    handleChange({ target: { name, value } }) {\r\n        this.setState({ [name]: value });\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.add} autoComplete=\"off\">\r\n                <div className=\"col-12 mb-2\">\r\n                    <TransitionGroup {...this.groupProps}>\r\n                        {this.state.todos.map( (item) =>\r\n                            // The next line is what controls\r\n                            // animated transitions\r\n                            <Fade key={item.id} collapse bottom>\r\n                                <div className=\"card\">\r\n                                    <div className=\"card-body justify-content-between\">\r\n                                        {item.text}\r\n                                        <button\r\n                                            data-id={item.id}\r\n                                            onClick={this.remove}\r\n                                            type=\"button\"\r\n                                            className=\"close\"\r\n                                            aria-label=\"Close\"\r\n                                        >\r\n                                            <span aria-hidden=\"true\">&times;</span>\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </Fade>\r\n                        )}\r\n                    </TransitionGroup>\r\n                </div>\r\n                <div className=\"col-10\">\r\n                    <div className=\"input-group mt-4 mb-1\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id='todoField'\r\n                            placeholder='Todo item'\r\n                            name='todo'\r\n                            value={this.state.todo}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <div className=\"input-group-append\">\r\n                            <button\r\n                                onClick={this.add}\r\n                                className=\"btn btn-outline-success\"\r\n                                type=\"button\"\r\n                            >\r\n                                Add Item\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">\r\n                        Item Count: {this.state.todos.length}\r\n                    </small>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReactReavealTodo;\r\n","import {useSpring, animated} from 'react-spring'\r\n\r\nconst ReactSpring = () => {\r\n    const props1 = useSpring({opacity: 1, from: {opacity: 0}})\r\n    const props2 = useSpring({ number: 100, from: { number: 0 } })\r\n    return (\r\n        <div>\r\n            <animated.div style={props1}>I will fade in</animated.div>\r\n            <animated.span>{props2.number}</animated.span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ReactSpring;\r\n\r\n\r\n","import TransitionExample from \"./Components/TransitionExample/TransitionExample\";\nimport TransitionGroupExample from \"./Components/TransitionGroupExample/TransitionGroupExample\";\nimport ReactAnimationsExample from \"./Components/ReactAnimationsExample/ReactAnimationsExample\";\nimport ReactReveal from \"./Components/ReactReveal/ReactReveal\";\nimport ReactReavealTodo from \"./Components/ReactReveal/ReactReavealTodo\";\nimport ReactSpring from \"./Components/ReactSpring/ReactSpring\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     {/*<TransitionExample/>*/}\n     {/*<TransitionGroupExample/>*/}\n     {/*<ReactAnimationsExample/>*/}\n     {/*<ReactReveal/>*/}\n     {/*<ReactReavealTodo/>*/}\n     <ReactSpring/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}